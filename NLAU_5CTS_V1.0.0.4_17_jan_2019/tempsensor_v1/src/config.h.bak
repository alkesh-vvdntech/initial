/*
 * config.h
 *
 *  Created on: Feb 10, 2015
 *      Author: rajeevnx
 */

#ifndef TEMPSENSOR_V1_CONFIG_H_
#define TEMPSENSOR_V1_CONFIG_H_

#define EXTERN extern

#define USE_MININI

#include "stdint.h"
#include "common.h"
#include "time.h"
#include "version.h"

//app mode for determining certain runtime behaviors/values
typedef enum {
    APP_MODE_CT5 = 0,
    APP_MODE_ST,
    APP_MODE_INVALID
} CONFIG_APP_MODE;

#define APP_MODE_ST5_STRING "ST5"
#define APP_MODE_CT5_STRING "CT5"

#define DEFAULT_APP_MODE_STRING APP_MODE_CT5_STRING

/**************************************************************************************************************************/
/* BEGIN FACTORY CONFIGURATION 																							  */
/**************************************************************************************************************************/

#ifndef _DEBUG
#define NEXLEAF_SMS_GATEWAY       "+19288572623"

#define NEXLEAF_DEFAULT_SERVER_IP "103.19.88.155"
#define NEXLEAF_DEFAULT_APN 	  "www."

// Path for getting the configuration from the server
// CONFIGURATION_URL_PATH/IMEI/1/
#define CONFIGURATION_URL_PATH "/v2/config"
#define DATA_UPLOAD_URL_PATH "/v2/temp"
#endif

// SMS alerts, it will send an SMS to the local testing number
#define ALERTS_SMS 1

// Threshold in percentage in which the device will enter deep hibernate mode
#define BATTERY_ALARM_THRESHOLD 20
#define BATTERY_HIBERNATE_THRESHOLD 10
#define POWER_ENABLE_ALERT 1

// Default behavior for forced uploads on power state change
#define POWER_CHANGE_FORCE_UPLOAD_ENABLE 1

// Thershold when the alarm will sound if there is a power cut (seconds)
#define THRESHOLD_TIME_POWER_OUT_ALARM 60*60*1

// Number of subsamples to capture per sample
#define NUM_SAMPLES_CAPTURE 10

void release_buf();

//Sampling configuration
#ifndef _DEBUG
#define PERIOD_UNDEFINED		60
#define PERIOD_SAMPLING			10		//in minutes
#define PERIOD_UPLOAD			60		//in minutes
//#define PERIOD_REBOOT 			24*60   //in minutes
#define PERIOD_REBOOT 			1440   //in minutes
#define PERIOD_TRANS_RESET		0   //in minutes
#define PERIOD_LCD_OFF			10
#define PERIOD_ALARMS_CHECK	    1
//#define PERIOD_CONFIGURATION_FETCH 0x2819A0 //default of 5 years - allows for 1 time triggers
#define PERIOD_SMS_CHECK   	    1		//poll interval in minutes for sms msg TODO change back
#define PERIOD_NETWORK_CHECK	1
#define PERIOD_LCD_REFRESH		1
#define PERIOD_PULLTIME			12*60	// 12 hours
#define PERIOD_BATTERY_CHECK 	1
#define SAMPLE_COUNT			10
#endif

//Alert configuration
#define ALARM_REPEAT_INTERVAL	360
#define ALARM_REPEAT_COUNT	28
#define LOW_TEMP_THRESHOLD		2		//deg celsius
#define HIGH_TEMP_THRESHOLD		8		//deg celsius
#define ALARM_TEMP_PERIOD	60		//in minutes
#define ALARM_LOW_TEMP_PERIOD	60	//in minutes
#define ALARM_HIGH_TEMP_PERIOD	300	//in minutes
#define HIGH_TEMP_THRESHOLD_OUTSIDE    40
#define ALARM_POWER_PERIOD		60		//in minutes
#define MIN_TEMP			  	-20
#define MAX_TEMP				55

//Battery configuration
#if BAT_VER == 1
#define   BATTERY_CAPACITY 		650			//650 mAh
#define   DESIGN_ENERGY			2405
#define   TERMINAL_VOLTAGE		3400
#define   TAPER_RATE			403
#else
#define   BATTERY_CAPACITY 		1600//750			//750 mAh
#define   DESIGN_ENERGY			6080//2850
#define   TERMINAL_VOLTAGE		3400
#define   TAPER_RATE			789//370
#define   TAPER_VOLT			4100
#endif

// Network signal quality values
#define NETWORK_DOWN_SS		2.0
#define NETWORK_UP_SS		NETWORK_DOWN_SS + 2 //2 points above the network down signal level
#define NETWORK_MAX_SS		31.0

#define NETWORK_ZERO 2.0

//Temperature cut off
#define STOVETRACE_TEMP_CUTOFF				-30		//-30 deg C
#define COLDTRACE_TEMP_CUTOFF				-60		//-60 deg C

#define TEMP_CUTOFF (cfgGetAppMode() == APP_MODE_ST ? STOVETRACE_TEMP_CUTOFF : COLDTRACE_TEMP_CUTOFF)

// 1 will disable the buzzer when there is an Alarm
// Buzzer will not work on button feedback
#define BUZZER_DISABLE 1

// 1 will cause buzzer to cycle between on/off during alarm
#define BUZZER_TOGGLE 1

//don't shut the lcd text off when turning off backlight
#define LCD_TEXT_PERSIST 1

// Disable buttons sounds
#define BUZZER_DISABLE_FEEDBACK 1

/**************************************************************************************************************************/
/* END FACTORY CONFIGURATION 																							  */
/**************************************************************************************************************************/

//Number of sensors

#define SYSTEM_NUM_SENSORS	2
#define SYSTEM_NUM_SIM_CARDS 	1

/**************************************************************************************************************************/
/* NETWORK AND TIMEOUTS		  																						      */
/**************************************************************************************************************************/

#ifndef _DEBUG
#define MAIN_SLEEP_TIME 1000
#define MAIN_LCD_OFF_SLEEP_TIME 30000
#endif
#define MAIN_SLEEP_POWER_OUTAGE 5000

// Poll times trying to connect to the network.
// After autoband it could take up to 90 seconds for the bands trial and error.
// So we have to wait for the modem to be ready.

#ifndef _DEBUG
#define HTTP_COMMAND_ATTEMPTS 5
#define NETWORK_CONNECTION_ATTEMPTS 5
#define NETWORK_CONNECTION_DELAY 3000
#endif

#define MODEM_CHECK_RETRY 	10
#define NETWORK_PULLTIME_ATTEMPTS 3

#define NETWORK_MAX_TRANSMIT_FAILS 10


/**************************************************************************************************************************/
/* LOGGING CONFIGURATION																							  */
/**************************************************************************************************************************/

#define LOG_DEFAULT_SYSTEM	1
#define LOG_DEFAULT_WEB		1
#define LOG_DEFAULT_CONFIG	1
#define LOG_DEFAULT_MODEM	1

/**************************************************************************************************************************/
/* DEVELOPMENT CONFIGURATION																							  */
/**************************************************************************************************************************/

#ifdef _DEBUG
#define NEXLEAF_SMS_GATEWAY          "+918096590590"
#define IST                           22                // Need to update if Device is going in another timezone
#define NEXLEAF_DEFAULT_SERVER_IP "undp.coldtrace.org"
#define NEXLEAF_DEFAULT_APN 	  "www."

// Path for getting the configuration from the server
// CONFIGURATION_URL_PATH/IMEI/1/
#define CONFIGURATION_URL_PATH "undp.coldtrace.org/ct5demo/config/json/v1/Nexleaf/355026070015082/"
//#define CONFIGURATION_URL_PATH "www.google.com"

#define DEVICE_ALARM_URL_PATH "undp.coldtrace.org/intel/config/"
//#define DEVICE_ALARM_URL_PATH "www.makequotation.com/sample.php"

#define DEVICE_READY_URL_PATH "undp.coldtrace.org/intel/config/"
//#define DEVICE_READY_URL_PATH "www.makequotation.com/sample.php"

#define DATA_UPLOAD_URL_PATH "undp.coldtrace.org/uploads/fsdk/v1/"
//#define DATA_UPLOAD_URL_PATH "www.makequotation.com/sample.php"

//862877030375016 --> IMEI of the device - Mohit Testing

#ifdef _EVIN_BUILD_
#define DEFAULT_SMS_SENDER_ID "EVININ"
#define DEFAULT_SMS_GATEWAY_KEY "EVTM"
#define PERIOD_SMS_CHECK   	    1		//poll interval in minutes for sms msg TODO change back
#define PERIOD_NETWORK_CHECK	    1
#else
#define DEFAULT_SMS_SENDER_ID "COLDTR"
#define DEFAULT_SMS_GATEWAY_KEY "cltr"
#define PERIOD_SMS_CHECK   	    2		//poll interval in minutes for sms msg TODO change back
#define PERIOD_NETWORK_CHECK	    3
#endif
#define ALERTS_SMS 1

#define MAIN_SLEEP_TIME 100
#define MAIN_LCD_OFF_SLEEP_TIME 10000

#define SYSTEM_TIMEZONE 22   // Number of quarters to add for IST
#define PERIOD_UNDEFINED		60
#define PERIOD_SAMPLING			1
#define PERIOD_UPLOAD			3
#define TX_MODE_GPRS_SMS                2
#define TX_MODE_GPRS                    1
#define PERIOD_REBOOT 			1440
#define PERIOD_LCD_OFF			5
#define PERIOD_ALARMS_CHECK	        1
#define PERIOD_BATTERY_CHECK 	        10
#define SAMPLE_COUNT			10
#define MAX_SI_LEN 7
#define MAX_SERVER_LEN 47

#define HTTP_COMMAND_ATTEMPTS 2
#define NETWORK_CONNECTION_ATTEMPTS 20
#define NETWORK_CONNECTION_DELAY 1000
#endif

//Display contants
#define LCD_DISPLAY_LEN			32
#define LCD_INIT_PARAM_SIZE		9
#define LCD_LINE_LEN			16
#define DEF_IMEI  "IMEI_UNKNOWN"

/*****************************************************************************************************************/
/* Main structures for the application */
/*****************************************************************************************************************/
#define MODE_GSM 1
#define MODE_GPRS (1 << 1)


#define priority_wifi 0
#define priority_gprs 1
#define priority_gsm 2

#define GSM_MODE_DEFAULT 1
#define GRPS_MODE_DEFAULT 1

#define SMS_MODE_DEVRDY_DEFAULT 1
#define SMS_MODE_FAILOVER_DEFAULT 1

typedef struct {
	//char cfgSMSCenter[GW_MAX_LEN + 1]; // Service Message Center number
	char cfgPhoneNum[GW_MAX_LEN + 1];
	char cfgAPN[APN_MAX_LEN + 1];
	char cfgSimId[SID_MAX_LEN+1];
        uint8_t fSimIdChanged;
	uint8_t iMaxMessages; // Max messages stored on sim card
	//uint16_t iCfgMCC;
	//uint16_t iCfgMNC;

	char simLastError[ERROR_MAX_LEN];
	uint16_t simErrorState;
	char simErrorToken;

	//int8_t last_SMS_message;  // Last message sent with this SIM card;

	char networkMode;   // Connecting to network
	char networkStatus; // check NETWORK_MODE_1 array for status

	//char SMSNotSupported;
	char simOperational; // The sim is in a functional state to send and receive messages

	int http_last_status_code;
} SIM_CARD_CONFIG;

// 255.255.255.255
#define MAX_IP_SIZE 36

// Careful with exceeding the size of the URL
#define MAX_URL_PATH 37

// FOLDERxx/FILENAME.TXT\0
#define MAX_PATH 8+1+8+1+3+1

typedef struct {
	float threshCold;
	float threshHot;
	uint16_t maxSecondsCold;
	uint16_t maxSecondsHot;
} TEMP_ALERT_PARAM;

typedef union {
	struct {
		unsigned char enablePowerAlert :1;
		unsigned char StateForcedUpload :1;
		unsigned char bit2 :1;
		unsigned char bit3 :1;
		unsigned char bit4 :1;
		unsigned char bit5 :1;
		unsigned char bit6 :1;
		unsigned char bit7 :1;
	} bits;
	unsigned char byte;
} POWER_CONFIG_FLAGS;

typedef union {
	struct {
		unsigned char BootDeviceReady :1;
		unsigned char APIFailover :1;
		unsigned char bit2 :1;
		unsigned char bit3 :1;
		unsigned char bit4 :1;
		unsigned char bit5 :1;
		unsigned char bit6 :1;
		unsigned char bit7 :1;
	} bits;
	unsigned char byte;
} SMS_ENABLE_FLAGS;

typedef struct {
	int16_t minutesPower;
        POWER_CONFIG_FLAGS flags;
	int8_t battThreshold;
} BATT_POWER_ALERT_PARAM;

typedef struct {
	uint16_t repeat_interval_secs;
	int8_t repeat_count_max;
} ALARM_REPEAT_PARAM;

typedef struct {
	uint16_t upload;
	uint16_t sampling;
	uint16_t systemReboot;
//	uint16_t configurationFetch;
	uint16_t smsCheck;
	//uint16_t networkCheck;
	uint16_t lcdOff;
	uint16_t alarmsCheck;
	//uint16_t modemPullTime;
	uint16_t batteryCheck;
	//uint16_t transmissionReset;
} INTERVAL_PARAM;

typedef union {
	struct {
		unsigned char system_log :1;
		unsigned char web_csv :1;
		unsigned char server_config :1;
		unsigned char modem_transactions :1;
		unsigned char sms_alerts :1;
		unsigned char text_persist :1;
		unsigned char buzzer_disable :1;
		unsigned char buzzer_toggle :1;
	} logs;
	unsigned char status;
} LOGGING_COMPONENTS;

#define MAX_SMS_NUMBERS 5

typedef struct {

	// A User that can get messages from the alarms
	char cfgReportSMS[GW_MAX_LEN + 1];

} REPORT_SMS;

//#define MAX_CONFIG_VERS_SIZE 8
typedef struct {
  char cfgVersion[8];
  CONFIG_APP_MODE cfgAppMode;

  int8_t cfgSIM_force; //force sim
  int8_t cfgSIM_slot;
  int8_t cfgSelectedSIM_slot;
  TEMP_ALERT_PARAM stTempAlertParams[5];
  BATT_POWER_ALERT_PARAM stBattPowerAlertParam;
  ALARM_REPEAT_PARAM stAlarmRepeatParam;
  INTERVAL_PARAM sIntervalsMins;
  char cfgIMEI[IMEI_MAX_LEN + 1];
  char cfgGatewayIP[MAX_IP_SIZE];
  char cfgGatewaySMS[GW_MAX_LEN + 1];
  char cfgGatewayKey[MAX_SI_LEN+1];
  char cfgConfig_URL[MAX_URL_PATH];
  char cfgUpload_URL[MAX_URL_PATH];
  char cfgDeviceAlarm_URL[MAX_URL_PATH];
  char cfgDeviceReady_URL[MAX_URL_PATH];
  char cfgMsgSenderId[MAX_SI_LEN+1];
  // max 5 numbers (probably won't have space for more
  REPORT_SMS cfgSMSNumbers[MAX_SMS_NUMBERS];
  uint8_t cfgUploadMode;
  SMS_ENABLE_FLAGS cfgSMSmode;
  SIM_CARD_CONFIG SIM[SYSTEM_NUM_SIM_CARDS];
  char ModemFirmwareVersion[FWV_MAX_LEN];
  struct tm lastSystemTime;
  int16_t cfgTimeZone;
  char ser_url[100];
  char crc[5];
  char ver[5];
  int msg_index;
  int print_en;
  LOGGING_COMPONENTS cfg;
} CONFIG_DEVICE;

typedef struct {
	uint8_t memoryInitialized;
/*    uint8_t modemFirstInit;
	uint32_t numberConfigurationRuns;
*/
        uint8_t modemFirstInit;
	uint8_t numberConfigurationRuns;
	//char firmwareVersion[17];
	uint16_t configStructureSize; // Size to check if there are changes on this structure

#ifdef _DEBUG_COUNT_BUFFERS
	// Stats to control buffer sizes
	uint16_t maxSamplebuffer;
	uint16_t maxRXBuffer;
	uint16_t maxTXBuffer;
#endif

	/*
#ifdef _DEBUG
	uint16_t stackLeft;
#endif
*/

} CONFIG_SYSTEM;

typedef struct {
	uint8_t failedTransmissionsGPRS; //
//	uint8_t failedTransmissionsGSM;  // Keep track of total failed transmission
//	uint8_t modemErrors;
//	uint8_t failsGPRS;
//	uint8_t failsGSM;
} SIM_STATE;

#define STATUS_NO_ALARM 0xF8

typedef union {
	struct {
		unsigned char alarm :1;	   // Alarm is on
		unsigned char lowAlarm :1;    // Temperature below minimum
		unsigned char highAlarm :1;   // Temperature above maximum
		unsigned char disconnected :1;   // Sensor not connected
		unsigned char connStateChange :1; // Check if plug state has changed
		unsigned char disabled :1;
		unsigned char incursion :1;
		unsigned char excursion :1;
	} state;
	unsigned char status;
} SENSOR_STATUS;

// Used to store the sensors data
#define TEMP_DATA_LEN		5
#define TEMP_BOOT_MAGIC_VAL 988998.8

typedef struct {
	char name[2];
	volatile int32_t iADC;
	float fTemperature;
    float lastThreshCold;
    float lastThreshHot;
	uint16_t iSamplesRead;
	char temperature[TEMP_DATA_LEN + 1];
} TEMPERATURE_SENSOR;

typedef struct {
	time_t alarm_time; // When was the alarm triggered
	int alarm_count;
} TEMP_ALARM_STATUS;

typedef struct {
	// Raw voltage values
	uint8_t iCapturing;
	uint16_t iSamplesRequired;
	uint16_t iSamplesRead;

	TEMP_ALARM_STATUS alarms[SYSTEM_NUM_SENSORS];
	SENSOR_STATUS state[SYSTEM_NUM_SENSORS];
	TEMPERATURE_SENSOR sensors[SYSTEM_NUM_SENSORS];
} TEMPERATURE;

typedef union {
	struct {
		unsigned char hibernate :1; //hibernation flag to stop sleep wake
		unsigned char snooze :1; //snooze for repeating alarm
		unsigned char globalAlarm :1;
		unsigned char battery :1;
		unsigned char SD_card_failure :1;
                unsigned char time_failure :1;
		unsigned char poweroutage :1;
		unsigned char modemFailure :1;
	} alarms;
	unsigned char status;
} SYSTEM_ALARMS;

typedef union {
	struct {
		unsigned char send_SD_alarm :1;
		unsigned char power_connected :1;
		unsigned char button_buzzer_override :1;
		unsigned char buzzer_sound :1;
		unsigned char http_enabled :1;
		unsigned char timestamp_on :1;
		unsigned char tempBoundaryCrossed :1;
		unsigned char powerAvailChanged :1;
	} switches;
	unsigned char status;
} SYSTEM_SWITCHES;

//  Commands to ignore if there was a problem on last boot
typedef union {
	struct {
		unsigned char sms_process_messages :1; // Clear SMS
		unsigned char data_transmit :1;	// Delete old files since we are crashing the software (corruption?)
		unsigned char state_clear_on_boot :1;
		unsigned char bit3 :1;
		unsigned char bit4 :1;
		unsigned char bit5 :1;
		unsigned char bit6 :1;
		unsigned char state_first_init :1;
	} disable;
	unsigned char status;
} SAFEBOOT_STATUS;

typedef struct {
	char network_state[12];

//	int network_presentation_mode;
	//NETWORK_STATUS_REGISTERED_HOME_NETWORK
	//NETWORK_STATUS_REGISTERED_ROAMING
	int network_status;

//	uint8_t network_failures;
} NETWORK_SERVICE;

typedef struct {
	// Last alarm message
	char alarm_message[16];

	// Current battery level
	uint8_t battery_level;
    uint8_t battery_state;
	time_t time_batteryWarn;
	int count_batteryWarn;
        int fw_flag;
        int type;

	// Last time it was plugged
	time_t time_powerOutage;
	int count_powerAlarm;

	//UTC timestamp in sec for power events
	time_t powerEventTimestamp;

	// SIM cards alarms and states
	//SIM_STATE simState[MAX_SMS_NUM];

	// Current sim modem Signal level
	uint8_t signal_level;

	// Temperature of sensors and alarms
	TEMPERATURE temp;

	SYSTEM_SWITCHES system;
	SYSTEM_ALARMS state;

	// If transmission wasn't fully completed this will
	// contain the last line we didn't transmit
	uint32_t lastSeek;
	char lastFile[13]; // Short file name (8.3 format) per ff.h

	// GSM or GPRS
	int network_mode;
	NETWORK_SERVICE net_service[2];

	SAFEBOOT_STATUS safeboot;

	uint32_t buzzerFeedback; // Set to play sound on buzzer and activate buzzer
        int retry;
        time_t last_sample_time;
#ifndef _EVIN_BUILD_
        uint8_t excursion_alarm_set[5];
        uint8_t power_alarm_set;
        int time_flag;
#endif
} SYSTEM_STATE;

typedef struct {
	int32_t dwLastSeek;
	float calibration[SYSTEM_NUM_SENSORS][2];
} CONFIG_CALIBRATION;


/*****************************************************************************************************************
SMS Configuration Parsing
*****************************************************************************************************************/
int8_t config_parse_configuration_sms(char*);
int8_t process_kvp(const char* key, const char* val);
//int8_t showValue(const char *, const char *);
int8_t setIn(const char *);
int8_t parse_alarm_var(const char *value);
const char* parse_value(const char *token,int16_t *temp);
const char* parse_value_float(const char *token, float *temp);
void process_sId();
int8_t parse_phone_number(const char *);
int8_t parse_time_zone(const char *);
int8_t parse_alarm_repeat_variable(const char *);
int8_t parse_battery_alarm_variable(const char *);

typedef struct {
char *key;
int8_t (*setvalue)(const char *);
}Key_ValuePipe;

typedef struct {
char *key;
char *value;
uint8_t size;
}Key_ValueString;

typedef struct {
char *key;
int8_t *value;
int8_t mod;
}Key_ValueInt;

typedef struct {
char *key;
uint8_t *bitField;
uint8_t bit;
}Key_ValueBitFlag;


extern const Key_ValueString g_KeyValueString[];
extern const Key_ValuePipe g_KeyValuePipe[];
extern const Key_ValueInt g_KeyValueInt[];

/*****************************************************************************************************************/
/* Configuration functions */
/*****************************************************************************************************************/

// Returns the current structure containing the info for the current SIM selected
SIM_CARD_CONFIG *config_getSIM();

// Returns current sim selected range [0..1]
uint8_t config_getSelectedSIM();

// Store the error of the SIM in memory to be displayed
void config_setSIMError(SIM_CARD_CONFIG *sim, char errorToken, uint16_t errorID,
		const char *error);

uint16_t config_getSIMError(int slot);
void config_reset_error(SIM_CARD_CONFIG *sim);
//void config_display_config();
uint16_t config_getSimLastError(char *charToken);
int config_default_configuration();
//int config_process_configuration();

#ifdef CONFIG_SAVE_IN_PROGRESS
void config_save_ini();
#endif

//int config_parse_configuration(char *msg);

uint8_t config_get_apn(const char *RXbuf, int8_t SIM_slot);
// Flags the sim as not working
void state_SIM_not_operational();

// Flags the sim as working again
void state_SIM_operational();

uint8_t config_is_SIM_configurable(int simSlot);

// For use in device ready/alarm api functions since pointer access was not working
extern CONFIG_DEVICE g_ConfigDevice;

/*****************************************************************************************************************/
/* DIAGNOSE AND TESTING 			   																		     */
/* Check if there is a hang on next reset																		 */
/*****************************************************************************************************************/
#define COMMAND_EVENTS 0
#define COMMAND_BOOT 100
#define COMMAND_TEMPERATURE_SAMPLE 200
#define COMMAND_GPRS 300
#define COMMAND_MODEMINIT 400
#define COMMAND_FATINIT 500
#define COMMAND_FATSAVE 600
#define COMMAND_SMS_SEND 700
#define COMMAND_LCDINIT 800
#define COMMAND_CALIBRATION 1000
#define COMMAND_POST 1100
#define COMMAND_TEMPERATURE 1200
#define COMMAND_MAIN_LCD_DISPLAY 1300
#define COMMAND_BOOT_MIDNIGHT 1400
#define COMMAND_MONITOR_ALARM 1500
#define COMMAND_NETWORK_SIGNAL_MONITOR 1600
#define COMMAND_FETCH_CONFIG 1700
#define COMMAND_SMS_PROCESS 1800
#define COMMAND_PARSE_CONFIG_ONLINE 1900
#define COMMAND_PARSE_CONFIG_ST1 1910
#define COMMAND_PARSE_CONFIG_ST2 1920
#define COMMAND_PARSE_CONFIG_ST3 1930

#define COMMAND_SET_NETWORK_SERVICE 2000
#define COMMAND_NETWORK_CONNECT 2100
#define COMMAND_SIM_ERROR 2200
#define COMMAND_UART_ERROR 2300
#define COMMAND_CHECK_NETWORK 2400
#define COMMAND_FIRST_INIT 2500
#define COMMAND_FAILOVER 2600
#define COMMAND_FAILOVER_HTTP_FAILED 2700
#define COMMAND_SWAP_SIM0 2800
#define COMMAND_SWAP_SIM1 2900
#define COMMAND_HTTP_ENABLE 3000
#define COMMAND_HTTP_DISABLE 3100
#define COMMAND_EVENT_CHECK_NETWORK 3200
#define COMMAND_EVENT_DEFERRED 3300

#define COMMAND_SEND_DATA_HTTP 3400
#define COMMAND_SEND_DATA_SMS 3500
#define COMMAND_SEND_TEMPERATURES_SMS 3600
#define COMMAND_CANCEL_BATCH 3700
#define COMMAND_PROCESS_BATCH 3800
#define COMMAND_OPEN_UPLOAD 3900
#define COMMAND_GET_CONFIGURATION 4000
#define COMMAND_SEND_DEV_API 4100

#define COMMAND_END 99

uint8_t state_isSimOperational();
uint8_t state_SimIdChanged();
void state_clearSimIdChanged();
void config_init();
void config_pull_configuration(const char* urlPath, int type);
void config_update_system_time();
uint8_t check_address_empty(uint8_t mem);
CONFIG_APP_MODE cfgGetAppMode(void);

// Setup mode in which we are at the moment
// Triggered by the Switch 3 button
extern int8_t g_iSystemSetup;

#endif /* TEMPSENSOR_V1_CONFIG_H_ */

