#include "msp430.h"
#include <stdint.h>
#include "FatFs_Lib.h"

#pragma location="HIGH_MEM"
const __data20 uint8_t testData[] = {
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11,
    0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xAA, 0xDD, 0x11
};

#define UPDATE_FILE_PATH "UPDATE.TXT"
FRESULT TestApp_Init_Drive() {
	FRESULT fr = FR_OK;
    FATFS FatFs; /* Work area (file system object) for logical drive */
    FIL fatFilr;
    FILINFO fatFili;


	/* Register work area to the default drive */
	fr = f_mount(&FatFs, "", 0);
	if (fr == FR_OK) {
        // Fat is ready
        //check for update image file
        fr = f_stat(UPDATE_FILE_PATH, &fatFili);
        if(fr == FR_OK) {
             //open the update file if one exists
            fr = f_open(&fatFilr, UPDATE_FILE_PATH, FA_READ | FA_OPEN_EXISTING);
            if(fr == FR_OK) {
                f_close(&fatFilr);
            }
        }
    }

	return fr;
}

#pragma required=testData
int main( void )
{
    // Stop watchdog timer to prevent time out reset
    WDTCTL = WDTPW + WDTHOLD; 
    
    P4OUT |= BIT5 | BIT6;

    if(TestApp_Init_Drive() == FR_OK) {
        while(1) {
            P4OUT ^= BIT5;
            __delay_cycles(500000);
        }
    } else {
         while(1) {
            P4OUT ^= BIT5;
            P4OUT ^= BIT6;
            __delay_cycles(500000);
        }
    }

}
