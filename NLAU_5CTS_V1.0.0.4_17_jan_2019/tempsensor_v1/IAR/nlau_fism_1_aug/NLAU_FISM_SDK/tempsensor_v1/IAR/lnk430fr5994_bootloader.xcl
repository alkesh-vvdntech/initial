// ************************************************
//
// XLINK configuration file for MSP430FR5994
//
// Copyright 1996-2016 IAR Systems AB.
//
// See the file 430/doc/licenses/IARSourceLicense.txt for detailed
// license information.
//
// $Revision: 13764 $
//
// ************************************************

// ---------------------------------------------------------
// Description
//

//
// Usage:
//
//   xlink [file file ...] -f lnk430fr5994.xcl
//
// -----------------------------------------------
// Device summary
//

//
// Core:                           MSP430Xv2
//
// Interrupt vectors:              56
//
// JTAG Signature memory:          4 Bytes
//
// BSL Signature memory:           4 Bytes
//
// IPE Signature memory:           8 Bytes
//
// Peripheral units:               00100-00FFF
//
// Information memory (FRAM):      01800-019FF
//
// Read/write memory (RAM):        01C00-02BFF
//
// Read/write memory (TINYRAM):    0000A-0001F
//
// Read/write memory (LEARAM):     02C00-03BFF
//
// Persistent memory (FRAM):       04000-0FFFF
//                                 10000-43FFF
//



/////////////////////////// MCU FRAM ADDRESSES ////////////////////////////////
//
-D_FRAM_INFO_START=1800
-D_FRAM_INFO_END=19FF
-D_FRAM_INFOD_START=1800
-D_FRAM_INFOD_END=187F
-D_FRAM_INFOC_START=1880
-D_FRAM_INFOC_END=18FF
-D_FRAM_INFOB_START=1900
-D_FRAM_INFOB_END=197F
-D_FRAM_INFOA_START=1980
-D_FRAM_INFOA_END=19FF

-D_FRAM_MAIN_START=4000
-D_FRAM_MAIN_END=FFFF

-D_FRAM_SIG_START=FF80
-D_FRAM_SIG_END=FF8F
-D_FRAM_JTAGSIG_START=FF80
-D_FRAM_JTAGSIG_END=FF83
-D_FRAM_BSLSIG_START=FF84
-D_FRAM_BSLSIG_END=FF87
-D_FRAM_IPESIG_START=FF88
-D_FRAM_IPESIG_END=FF8E

-D_FRAM_VECTORS_START=FF90
-D_FRAM_RESET_VECTOR=FFFE //always FFFE

-D_FRAM_HIGH_START=10000
-D_FRAM_HIGH_END=42FFF


/////////////////////////// MCU RAM ADDRESSES //////////////////////////////////
//
-D_RAM_START=1C00
-D_RAM_END=2BFF


///////////////////////// BOOT AREA FRAM ADDRESSES ////////////////////////////
//
// address of Boot Area
    -D_BOOT_Start=C400
    -D_BOOT_End=FF7F
// FatFs Library Call Table at end of Booloader
//    -D_DELAY_VECTOR=FF18
//    -D_DELAY_VECTOR_END=FF1B
//    -D_LCD_VECTOR=FF1C
//    -D_LCD_VECTOR_END=FF47
   -D_I2C_VECTOR=FF48
   -D_I2C_VECTOR_END=FF4F
//    -D_FATFS_VECTOR=FF50
// address of Information memory area used by Boot
    -D_BOOT_Info_Start=1800
    -D_BOOT_Info_End=19FF

/////////// APP INFO ADDRESSES (NO CODE - RAM saving) /////////
//
// Start address of Information memory area used by Boot
    -D_App_Info_Start=19FF
// End address of Information memory area used by Boot
    -D_App_Info_End=19FF
    
    ///////////////////////////// APP AREA FRAM ADDRESSES /////////////////////////
//
// Start address of non-initialized UserSpace (not included in checksum)
    -D_UserSpace_Start=4000
// End address of non-initialized UserSpace
    -D_UserSpace_End=53FF
// Application Checksum address
    -D_AppChecksum=5400
// Address of FRAM Password (2B)
    -D_AppUpdate_Password_Addr=5402
// Address of Status and Control Area (1B)
    -D_AppUpdate_Status_Addr=5404
// Application Start address (after checksum and update variables)
    -D_App_Main_Start=5405
// Application End Address
    -D_App_Main_End=C3FF
// Application reset vector
    -D_App_Reset_Vector=C3FE
// Start address of Proxy vector table
    -D_App_Proxy_Vector_Start=C36A
// End address of Proxy vector table
    -D_App_Proxy_Vector_End=C3FD
// Application High Start Address    
    -D_App_High_Start=10000
// Application High Start Address  
    -D_App_High_Const_Start=10040
// Application High End Address 
    -D_App_High_End=42FFF
// Size of main area calculated by CRC (App_Main)
    -D_CRC_Main_Size=6FFB
// Size of high area calculated by CRC (App_High)
    -D_CRC_High_Size=34000

//////////////////////// BOOT AREA RAM ADDRESSES ///////////////////////////////
//
// Start address of Boot RAM
    -D_BOOT_RAM_START=1C00
// End address of Boot RAM
    -D_BOOT_RAM_END=2131
    
/////////// BOOT-APP RAM ADDRESSES (can be overwritten by App or Boot) /////////
//
// Start address of RAM used by App and Boot
    -D_SHARED_RAM_START=2132
// End address of RAM used by App and Boot
    -D_SHARED_RAM_END=2BFF


// -----------------------------------------------
// Define cpu
//

-cmsp430


// -----------------------------------------------
// Support for placing functions in read/write memory
//

-QCODE_I=CODE_ID


// -----------------------------------------------
// Support for thread local storage
//

-QTLS16_I=TLS16_ID


// -----------------------------------------------
// Hardware multiplier location
//

-D__iar_HWMUL=4C0

// -----------------------------------------------
// RAM memory
//

-Z(DATA)TINYRAM=000A-001F
-Z(DATA)LEARAM=2C00-3AC7
-Z(DATA)LEASTACK=3AC8-3BFF
-Z(DATA)DATA16_I,DATA16_Z,DATA16_N,TLS16_I,AGGREGATE=1C00-23FF
-Z(DATA)CODE_I
-Z(DATA)DATA20_I,DATA20_Z,DATA20_N=2400-2BFF
-Z(DATA)CSTACK+_STACK_SIZE#
-Z(DATA)RAW_BLOCK=1800-19FF

// -----------------------------------------------
// FRAM memory
//

// -------------------------------------
// Low memory 0-0FFFF
//

// ---------------------------
// Read/write data in FRAM
//

-Z(CONST)DATA16_P,DATA20_P=C400-FF7F
-Z(DATA)DATA16_HEAP+_DATA16_HEAP_SIZE
-Z(DATA)DATA20_HEAP+_DATA20_HEAP_SIZE

// ---------------------------
// Memory Protection Unit (MPU) border
//

-Z(CONST)MPU_B1

// ---------------------------
// Intellectual Property Encapsulation (IPE)
//

-Z(CONST)IPE_B1=C400-FF7F
-Z(DATA)IPEDATA16_N
-Z(CODE)IPECODE16
-Z(CONST)IPEDATA16_C,IPE_B2

// ---------------------------
// Memory Protection Unit (MPU) border
//

-Z(CONST)MPU_B2

// ---------------------------
// Constant data
//

-Z(CONST)DATA16_C,DATA16_ID,TLS16_ID,DIFUNCT,CHECKSUM=C400-FF7F

// ---------------------------
// Code
//

-Z(CODE)CSTART,ISR_CODE,CODE16=C400-FF7F


// -------------------------------------
// All memory 0-FFFFF
//

// ---------------------------
// Code
//

-Z(CODE)FRAM_PASSWORD=5402
-Z(CODE)FRAM_STATCTRL=5404
-Z(CODE)FATFS_VTABLE=FF50-FF7F
-Z(CODE)I2C_VTABLE=FF48-FF4F
//-Z(CODE)LCD_VTABLE=FF1C-FF47
-Z(CODE)DELAY_VTABLE=FF18-FF1B
-P(CODE)CODE=C400-FF7F
-Z(CODE)CODE_PAD

// ---------------------------
// Constant data
//

-Z(CONST)DATA20_C,DATA20_ID,CODE_ID=C400-FF7F


// -------------------------------------
// Interrupt vectors
//
-Z(CONST)SIGNATURE=FF80-FF8F
-Z(CONST)JTAGSIGNATURE=FF80-FF83
-Z(CONST)BSLSIGNATURE=FF84-FF87
-Z(CONST)IPESIGNATURE=FF88-FF8F
-Z(CODE)INTVEC=FF90-FFFF
-Z(CODE)BOOT_VECTOR_TABLE#FFFD
-Z(CODE)RESET=FFFE-FFFF