/***********************************HEADER FILES************************************************/
#include "modem.h"
#include "modem_uart.h"
#include "main_system.h"
#include "ota.h"
#include "sms.h"
#include "crc.h"
#include "stdlib.h"
#include "stdio.h"
#include "stdint.h"
#include "string.h"
#include "spi_flash.h"

#ifndef OTA_ENABLE
#define DEBUG
extern char ota_url[75];
extern char image_crc[10];

unsigned char fw_version[] = {"V1.0.7"};
 /**********************************************************************************************
   * File Name		: ota.c
   * Function Name	: unsigned int CRC_check(char * buffer)
   * Parameters 	: char * buffer
   * Return 		: crc
   * Description 	: calculate the CRC of the buffer
   **********************************************************************************************/
unsigned int CRC_check(char * buffer)
{
    unsigned int l_index = 0, temp;
    static unsigned int CRC = 0;

    for (l_index = 0;l_index<(strlen(buffer)); l_index++)
    {
      if (buffer[l_index] > ' ')
	  {
        temp = buffer[l_index];
        CRC = (CRC + temp) % 256;   // 8 bit CRC
      }
    }
    return CRC;
  }
  /**********************************************************************************************
* File Name		: ota.c
* Function Name	: unsigned char ota_process(void)
* Parameters 	: None
* Return 		: download_done
* Description 	: start the OTA
**********************************************************************************************/
void check_ota_failed()
{
  if(flags.sim_ready == 1)
  {
      unsigned char ota_failed=0;
      
      ota_failed = *(uint32_t*)0x43030;
      if(ota_failed == 3)
      {
        if (send_cmd_wait("AT+CMGL=\"ALL\"\r\n", "+CMGL:",5, 1))
        {
          parse_sms();
          debug_print("\r\nOTA_was_failed_due_to_some_error_it_will_start_again_\r\n\r\n");
        }
      }
      else
      {
          delete_sms();
      }
  }

}
/**********************************************************************************************
* File Name		: ota.c
* Function Name	: unsigned char ota_process(void)
* Parameters 	: None
* Return 		: download_done
* Description 	: start the OTA
**********************************************************************************************/
unsigned char ota_process(void)
{

  char * ptr_at_responce,*rsp,*ota_check;
  uint32_t pkt_length;
  uint16_t byte_to_read;
  char debug_buff[100];
  //char tmp_str[16];
  unsigned char ota_status = 0;
  char local_buff[BUFFER_MAX_SIZE];
  char at_cmd_str[32];
  uint32_t http_break = 0;
  char fw_version_cloud[10];
  char download_done = 0, first_check = 1;
  //unsigned int crc = 0;
  char http_url[200];
  unsigned int page=0;;
  char cloud_crc[10] = {0};
  char file_size_buff[50];
  uint32_t file_size = 0;
   uint32_t check_image_size = 0;
  uint8_t state,len=0;
  char * ptr;
  unsigned char crc_failed = 0;

  uint16_t crc = 0xFFFF,downloaded_crc = 0;;
  
 flash_memory.put_default_idx = 0;
  //send_cmd_wait(GSM_BUSY_1, "OK\r\n", 60, 3);
 send_cmd_wait(GSM_BUSY_1, "OK\r\n",20,2);
  send_cmd_wait(DETACH_BEARER, "OK\r\n", 60, 3);
  send_cmd_wait(CONTYPE, "OK\r\n", 60, 3);

  send_cmd_wait("AT+SAPBR=3,1,\"APN\",\"airtelgprs.com\"\r\n", "OK\r\n",20,2);

  send_cmd_wait(SET_BEARER, "OK\r\n", 60, 1);
  send_cmd_wait(CHECK_SAP_IP, "OK\r\n", 60,1);
  
  flash_memory.put_default_idx = 0;
  
 
  /* setup- http parameter */
  http_init();
  memset(http_url,'\0',sizeof(http_url));
  sprintf(http_url,"AT+HTTPPARA=\"URL\",\"%s\"\r\n",ota_url);
  send_cmd_wait(http_url, "OK\r\n",20,2);
 
           
  //send_cmd_wait("AT+HTTPPARA=\"URL\",\"http://in.coldtrace.org/fism_uploads/uploads/FISM_APP.txt\"\r\n", "OK\r\n",20,2);
  // Image on cloud is as
  //v1.0.2*070$@44048013068F0C43B013C669B013EEA86A14B1001A00B240805A
  /*
  FW version--- v1.0.2*
  CRC------- 070$
  */
	while (0 == download_done)
	{
		 if(send_cmd_wait("AT+HTTPACTION=0\r\n", ",200", 120,3))
		 {
			 if(ota_check=strstr(GSM_buffer,",200,"))
			 {
				 ptr_at_responce=strtok(ota_check,",");
				// ptr_at_responce=strtok(NULL,",");
				 ptr_at_responce=strtok(NULL,"\r\n");                         
				 file_size = atol(ptr_at_responce);
				 
                                 #ifdef DEBUG
                                 debug_print(ptr_at_responce);
				 debug_print("\r\n");
				 #endif
			 }
		 }
		 while (file_size>0)
		 {
                   
			 
			 memset(at_cmd_str,'\0',sizeof(at_cmd_str));
			 sprintf(at_cmd_str,"AT+HTTPREAD=%ld,250\r\n",http_break);
			 if(send_cmd_wait(at_cmd_str, "+HTTPREAD", 60, 2))
			 {
				 ptr_at_responce=strtok(GSM_buffer,"\n");
				 ptr_at_responce=strtok(NULL,"\n");
				 ptr_at_responce=strtok(NULL,"\r");
				 memset(local_buff,'\0',sizeof(local_buff));
				 //pkt_length=strlen((const char *)ptr_at_responce);
				 //http_break=http_break+pkt_length;
				 //file_size-=pkt_length;
                                  file_size = file_size - 250;
                                  http_break = http_break + 250;
                                  
                                  
                                      
                                  #ifdef DEBUG
                                  memset(file_size_buff,'\0',sizeof(file_size_buff));
                                  sprintf(file_size_buff,"Download remain :%ld bytes\r\n",file_size);
                                  debug_print(file_size_buff);				// new firmware is available
                                  #endif
				
				 if(first_check)
				 {
					 first_check=0;
					 memset(fw_version_cloud,'\0',sizeof(fw_version_cloud));
					 memset(cloud_crc,'\0',sizeof(cloud_crc));
					 rsp=strtok(ptr_at_responce,"*");
					 strcpy(fw_version_cloud,rsp);
					 rsp=strtok(NULL,"$");
					 strcpy(cloud_crc,rsp);
                                         if(strcmp(cloud_crc,image_crc)!=0)
                                         {
                                            crc_failed = 0xff;
                                            fram_write(0x43030,(char *)&crc_failed,1);
                                            return 0;
                                         }
					 rsp=strtok(NULL,"\r");
					 strcpy(local_buff,rsp);
					 #ifdef DEBUG
					 debug_print(fw_version_cloud);
					 debug_print("\r\n");
					 debug_print(cloud_crc);
					 debug_print("\r\n");
					 #endif
					 if(strcmp(fw_version,fw_version_cloud))
					 {
                                            #ifdef DEBUG
                                            debug_print("OTA Started\r\n");				// new firmware is available
                                            #endif
					 }
					 else
					 {
                                                crc_failed = 0xff;
						fram_write(0x43030,(char *)&crc_failed,1);
						return 0;
					 }

				 }
				 else
				 {
  				    strcpy(local_buff,ptr_at_responce);
				 }
                                 crc = crc_get(local_buff,strlen(local_buff),crc);
				 //crc = CRC_check(local_buff);
				 #ifdef DEBUG
				 sprintf(at_cmd_str,"CRC of packet:%x\r\n",crc);
				 debug_print(at_cmd_str);
				 #endif
                                ota_status=  flash_memory_save_OTA_image(local_buff);
                                if(ota_status == 0)
                                {
                                  break;
                                }
                                
                                
			 }
		 }
                 
                downloaded_crc = strtol(cloud_crc,&ptr,16);
		if ((downloaded_crc == crc) && (crc != 0) && (downloaded_crc) != 0)
		{
			#ifdef DEBUG
			sprintf(at_cmd_str,"CRC:%x\r\n",crc);
			debug_print(at_cmd_str);
			debug_print(cloud_crc);
			debug_print("\r\n");
			debug_print("CRC Pass\r\n");				// new firmware is available
			#endif
			download_done = 1;     // CRC is matched
		}
		else
		{
#ifdef DEBUG
                        sprintf(at_cmd_str,"CRC:%x\r\n",crc);
                        debug_print(at_cmd_str);
                        debug_print(cloud_crc);
                        debug_print("\r\n");
                        debug_print("CRC Fail\r\n");				// new firmware is available
#endif
                        crc_failed = 0xff;
                        fram_write(0x43030,(char *)&crc_failed,1);
                        download_done = 0;     // CRC match failed
                }
		return download_done;
	}
return download_done;
}
#endif
